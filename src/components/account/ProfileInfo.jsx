import React, { useEffect, useState } from "react";
import {
  getCurrentUser,
  checkTokenValidity,
  getProfile,
  updateProfile,
} from "../../services/accountApi";

import AutoCompleteInput from "../../utils/AutoCompleteInput";

const ProfileInfo = () => {
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState({
    hoTen: "",
    noiCongTac: "",
    ngaySinh: "",
    hocHamHocVi: "",
    thuocBenhVien: false,
  });
  const [editMode, setEditMode] = useState(false);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  const [tokenError, setTokenError] = useState("");

  useEffect(() => {
    checkTokenValidity()
      .then(() => {
        getCurrentUser().then(setUser).catch(() => {
          setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin. C√≥ th·ªÉ b·∫°n ch∆∞a ƒëƒÉng nh·∫≠p.");
        });

        getProfile().then((data) => {
          const isEmptyDate = !data.ngaySinh || data.ngaySinh.startsWith("0001");
          setProfile({
            ...data,
            ngaySinh: isEmptyDate ? "2000-01-01" : data.ngaySinh.slice(0, 10),
          });
        });
      })
      .catch(() => {
        setTokenError("Token kh√¥ng h·ª£p l·ªá. B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i.");
      });
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setProfile((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await updateProfile(profile);
      setMessage("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
      setEditMode(false);
    } catch {
      setMessage("‚ùå C√≥ l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin.");
    }
  };

  if (tokenError) return <div className="alert alert-danger mt-4">{tokenError}</div>;
  if (error) return <div className="alert alert-danger mt-4">{error}</div>;
  if (!user) return <div className="text-center mt-5">üîÑ ƒêang t·∫£i...</div>;

  return (
    <div className="container mt-5">
      <div className="card shadow p-4 rounded-4 mb-5">
        <h3 className="text-primary mb-4">üë§ Th√¥ng tin t√†i kho·∫£n</h3>
        <div className="row">
          <div className="col-md-6 mb-3"><strong>H·ªç t√™n:</strong> <div>{user.hoTen}</div></div>
          <div className="col-md-6 mb-3"><strong>Email:</strong> <div>{user.email}</div></div>
          <div className="col-md-6 mb-3"><strong>S·ªë cƒÉn c∆∞·ªõc:</strong> <div>{user.soCanCuoc}</div></div>
          <div className="col-md-6 mb-3"><strong>Vai tr√≤:</strong> <div>{Array.isArray(user.roles) ? user.roles.join(", ") : "Ch∆∞a c√≥"}</div></div>
        </div>
      </div>

      <div className="card shadow p-4 rounded-4">
        <h4 className="text-success mb-4">üìù Th√¥ng tin b·ªï sung</h4>
        {message && <div className="alert alert-info">{message}</div>}

        {!editMode ? (
          <>
            <div className="mb-3"><strong>N∆°i c√¥ng t√°c:</strong> <div>{profile.noiCongTac || "Ch∆∞a c·∫≠p nh·∫≠t"}</div></div>
            <div className="mb-3"><strong>Ng√†y sinh:</strong> <div>{profile.ngaySinh || "Ch∆∞a c·∫≠p nh·∫≠t"}</div></div>
            <div className="mb-3"><strong>H·ªçc h√†m h·ªçc v·ªã:</strong> <div>{profile.hocHamHocVi || "Ch∆∞a c·∫≠p nh·∫≠t"}</div></div>
            <div className="mb-3"><strong>Thu·ªôc b·ªánh vi·ªán:</strong> <div>{profile.thuocBenhVien ? "C√≥" : "Kh√¥ng"}</div></div>

            <button className="btn btn-primary mt-2" onClick={() => setEditMode(true)}>
              ‚úèÔ∏è Thay ƒë·ªïi
            </button>
          </>
        ) : (
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label>N∆°i c√¥ng t√°c</label>
              <input
                name="noiCongTac"
                value={profile.noiCongTac}
                onChange={handleChange}
                placeholder="VD: B·ªánh vi·ªán Ung B∆∞·ªõu C∆° S·ªü 2"
                className="form-control"
              />
            </div>

            <div className="mb-3">
              <label>Ng√†y sinh</label>
              <input
                type="date"
                name="ngaySinh"
                value={profile.ngaySinh}
                onChange={handleChange}
                className="form-control"
                min="1960-01-01"
                max="2005-12-31"
              />

            </div>

            <div className="mb-3">
              <label>H·ªçc h√†m h·ªçc v·ªã</label>
              <AutoCompleteInput
                value={profile.hocHamHocVi}
                onChange={(newValue) =>
                  setProfile((prev) => ({ ...prev, hocHamHocVi: newValue }))
                }
              />
            </div>

            <div className="form-check mb-3">
              <input
                type="checkbox"
                name="thuocBenhVien"
                checked={profile.thuocBenhVien}
                onChange={handleChange}
                className="form-check-input"
              />
              <label className="form-check-label">Thu·ªôc b·ªánh vi·ªán</label>
              <div className="form-text">Tick n·∫øu b·∫°n ƒëang c√¥ng t√°c t·∫°i b·ªánh vi·ªán Ung B∆∞·ªõu C∆° S·ªü 2</div>
            </div>

            <div className="d-flex gap-2">
              <button className="btn btn-success" type="submit">üíæ L∆∞u</button>
              <button className="btn btn-secondary" type="button" onClick={() => setEditMode(false)}>‚Ü©Ô∏è Hu·ª∑</button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
};

export default ProfileInfo;
